Componentes Funcionales

function Mifuncion (){
  return null;
}

const MifuncionFlecha = () =>{
  return null;
}

- Importar React
- Debe tener una funcion
- El nombre de la funcion debe empezar con mayusculas siempre
- La funcion debe retornar algo (siempre debe ser un solo elemento)
- Se debe exportar la funcion  (export default)
- 

Componentes
-Props
-States
-Ciclo de vida
- Metodos del ciclo de vida 

const MiFuncion = (parametro) => {

}

function MiFuncion ( parametro){
  
}

hooks
-Siempre comuenzan con use
-Siempre se declaran de un Componentes
-Son funciones 
-No se pueden declarar las condicionesles(if)

ciclo de vida de componentes y Metodos
*************************************

-Montaje (Mount) monta
      -Constructor 
      -Render
      -CompnenteDidMount

-Actualizacion(Update) actualiza
      -Constructor
      -Render
      -ComponentDiUpdate

-Desmontaje(Unmount) desmonta
      -CompnentWillUnmount

useEffect 

Con esta configuracion el useEffect se ejecuta solo en el Montaje
useEffect(()=>{
      //Bloque de codigo
},[]);


Con esta configuracion el useEffect se ejecuta en el Montaje y cuando detecta cambios en valores del array de dependencia
useEffect(()=>{
      //Bloque de codigo
},[valores]);


Con esta configuracion el useEffect se ejecuta en el Montaje y actualizaciones
useEffect(()=>{
      //Bloque de codigo
});


XHR - Fetch (then async/await axios)

http:

A - B
Request - Response
Cliente - Server

Request -ciente:
 - URL
 - Metodo GET - POST - DETELE -PUT - PATH
 - Headers
 - Body
 - Version

 Response-Server 
- Version
- Headers
- Body
-Codigo 100-200-300-400-500

JSON
const usuario = {
      "nombre":"juan"
      "apellido":25,
      "edad":"juan",
      "dni":"47252890",
}
Es una promesa que recibe dos parametros
fetch(url,{
      method: "POST",
      headers: {
            'Content-Type': 'application/json'
      },
      body:JSON.stringify({nombre: "Ale"})

})
